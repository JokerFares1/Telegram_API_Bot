// ====================================================================
// ุงูููุฏ ุงููุนุฏูู ููุนูู ูู Serverless Function ุนูู Vercel (Webhooks)
// ====================================================================

// 1. ุงุณุชูุฑุงุฏ ุงูููุชุจุงุช ุงูุถุฑูุฑูุฉ
const { Telegraf, session } = require('telegraf');
const { MongoClient } = require('mongodb');
const axios = require('axios');
const config = require('./config'); // ููู ุงูุฅุนุฏุงุฏุงุช

// 2. ุชููุฆุฉ ุงูุจูุช ููุงุนุฏุฉ ุงูุจูุงูุงุช
const bot = new Telegraf(config.BOT_TOKEN);
let db; // ูุชุบูุฑ ูุญูุธ ุงุชุตุงู ูุงุนุฏุฉ ุงูุจูุงูุงุช

// 3. ุฏุงูุฉ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
async function connectDB() {
    if (db) return db; // ุฅุฐุง ูุงู ุงูุงุชุตุงู ููุฌูุฏุงูุ ุฃุนุฏู ูุจุงุดุฑุฉ

    try {
        const client = new MongoClient(config.MONGO_URI, {
            useNewUrlParser: true,
            useUnifiedTopology: true,
        });
        await client.connect();
        db = client.db(config.MONGO_DB_NAME);
        console.log("โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุจูุงูุงุช MongoDB ุจูุฌุงุญ.");
        return db;
    } catch (error) {
        console.error("โ ูุดู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช:", error.message);
        throw error; // ุฃุนุฏ ุฑูู ุงูุฎุทุฃ ูุฅุธูุงุฑู ูู ุณุฌูุงุช Vercel
    }
}

// 4. ุงุณุชุฎุฏุงู ุงูุฌูุณุงุช (Sessions) ูุงูู Middleware ุงูุฃุณุงุณู
bot.use(session());

// 5. ูุธููุฉ ุฌูุจ ุงูุจูุงูุงุช ุงูุฃุณุงุณูุฉ ูููุณุชุฎุฏู (ูุซู ุนุฏุฏ ุงูุญุณุงุจุงุช)
async function getUserData(userId) {
    const database = await connectDB();
    const usersCollection = database.collection('users');
    // ุงุจุญุซ ุนู ุงููุณุชุฎุฏู ุฃู ุฃูุดุฆู ุฅุฐุง ูู ููู ููุฌูุฏุงู
    let user = await usersCollection.findOne({ userId });

    if (!user) {
        user = {
            userId,
            isActivated: false,
            accountsCount: 0,
            activationCode: null,
            isAdmin: userId == config.ADMIN_ID,
        };
        await usersCollection.insertOne(user);
    }
    return user;
}

// ==============================
// 6. ูุนุงูุฌุฉ ุงูุฃูุงูุฑ ูุงููุธุงุฆู (ููุง ูู ููุฏู ุงูุฃุตูู)
// ==============================

// ุฃูุฑ /start
bot.command('start', async (ctx) => {
    // ... ููุฏ ูุนุงูุฌุฉ ุงูุฃูุฑ /start (ุฑุณุงูุฉ ุงูุชุฑุญูุจุ ุงูุฅุฑุดุงุฏุงุชุ ุฅูุฎ)
    // ููุถู ุฃู ูููู ุจุณูุทุงูุ ูุซู:
    await ctx.reply('ูุฑุญุจุงู ุจู! ุฃูุง ุจูุช ุฎุฏูุฉ ุงูุฃููุงุฏ. ุงุณุชุฎุฏู /act ูุชูุนูู ุญุณุงุจู.');
});

// ุฃูุฑ /act
bot.command('act', async (ctx) => {
    const args = ctx.message.text.split(' ');
    if (args.length !== 2) {
        return ctx.reply('ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงูููุฏ ุจุนุฏ ุงูุฃูุฑ. ูุซุงู: /act YOURCODE');
    }
    
    const code = args[1];
    const database = await connectDB();
    const codesCollection = database.collection('codes');
    const usersCollection = database.collection('users');

    try {
        const codeDoc = await codesCollection.findOne({ code, isUsed: false });

        if (codeDoc) {
            // ุชุญุฏูุซ ุงูููุฏ ูู ูุณุชุฎุฏู
            await codesCollection.updateOne(
                { _id: codeDoc._id },
                { $set: { isUsed: true, usedBy: ctx.from.id, usedAt: new Date() } }
            );

            // ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู
            await usersCollection.updateOne(
                { userId: ctx.from.id },
                { $set: { isActivated: true, activationCode: code } },
                { upsert: true } // ุฅุฐุง ูู ููู ููุฌูุฏุงูุ ูู ุจุฅูุดุงุฆู
            );
            
            ctx.reply('โ ุชู ุชูุนูู ุญุณุงุจู ุจูุฌุงุญ! ููููู ุงูุขู ุงุณุชุฎุฏุงู ุฎุฏูุงุช ุงูุจูุช.');
        } else {
            ctx.reply('โ ููุฏ ุงูุชูุนูู ุบูุฑ ุตุญูุญ ุฃู ุชู ุงุณุชุฎุฏุงูู ูุณุจูุงู.');
        }

    } catch (error) {
        console.error("ุฎุทุฃ ูู ูุนุงูุฌุฉ ุฃูุฑ /act:", error);
        ctx.reply('ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุนูููุฉ ุงูุชูุนูู. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.');
    }
});


// ... ููููู ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ ุงูุฃุฎุฑู ููุง (/buyacc, /name, /mycount, /deleteacc)
// ... ูุน ุงูุชุฃูุฏ ูู ุฃู ูู ุฃูุฑ ูุณุชุฎุฏู ุฏุงูุฉ connectDB() ุนูุฏ ุงูุญุงุฌุฉ ููุงุนุฏุฉ ุงูุจูุงูุงุช.

// ูุนุงูุฌุฉ ุฃู ุฑุณุงูุฉ ูุตูุฉ ุฃุฎุฑู
bot.on('text', async (ctx) => {
    // ... ุถุน ููุง ุงูููุทู ุงูุฃุณุงุณู ููุนุงูุฌุฉ ุฑุณุงุฆู ุงูุจุฑูุฏ/ุงูุฃููุงุฏ/ุงูู API
    // (ูุซูุงู: ุงูุชุญูู ูู ุงูุชูุนูู ูุจู ุฅุฑุณุงู ุทูุจ ุฅูู Hotmail API)
    
    const user = await getUserData(ctx.from.id);
    if (!user.isActivated) {
         return ctx.reply('๐ด ุญุณุงุจู ุบูุฑ ููุนูู. ูุฑุฌู ุงุณุชุฎุฏุงู /act CODE ูุชูุนููู.');
    }
    
    // ูุซุงู ุนูู ุฏุงูุฉ ุงุณุชุฏุนุงุก API (ุชุนุชูุฏ ุนูู ููุฏู ุงูุฃุตูู)
    // if (ctx.message.text.includes('@')) {
    //     await ctx.reply('ุฌุงุฑู ุฅุฑุณุงู ุทูุจ API...');
    //     // ููุง ูุชู ูุถุน ููุฏ Axios ูุงุณุชุฏุนุงุก Hotmail007 API
    // }
    
    await ctx.reply('ุชู ุงุณุชูุจุงู ุฑุณุงูุชู ุจูุฌุงุญ.');
});


// ======================================
// 7. ุฅุนุฏุงุฏ Webhook ูู Vercel (ุงูููุทุฉ ุงูุฃูู)
// ======================================

// ูุฐู ูู ุงููุธููุฉ ุงูุชู ุณูุชู ุงุณุชุฏุนุงุคูุง ูู ูุจู Vercel ุนูุฏ ูุตูู ุฃู ุทูุจ
module.exports = async (req, res) => {
    try {
        // ุงูุชุฃูุฏ ูู ุฃู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฌูุฏ ูุจู ูุนุงูุฌุฉ ุงูุทูุจ
        await connectDB(); 

        // ุฅุฑุณุงู ุทูุจ ุงูู Webhook ุฅูู ูุนุงูุฌ Telegraf
        await bot.webhookCallback('/api')(req, res);

    } catch (error) {
        console.error("ุฎุทุฃ ุนุงู ูู Webhook Vercel:", error);
        // ูุฌุจ ุฅุฑุณุงู ุงุณุชุฌุงุจุฉ HTTP 200 ูุชุฌูุจ ุฅุนุงุฏุฉ ุฅุฑุณุงู ุงูุฑุณุงุฆู ูู ุชูููุฌุฑุงู
        if (!res.headersSent) {
             res.status(200).send('Webhook Processed (Error Ignored for Telegram)');
        }
    }
};